package server.endpoints.UserControllerTests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;

import javax.servlet.ServletContext;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MvcResult;

import server.endpoints.AuthorizedTests;
import server.endpoints.inputmodels.RegisterInputModel;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
@ContextConfiguration
@WebAppConfiguration
public class UserTests extends AuthorizedTests {
	
	@Before
	public void setup() throws Exception {
		setupMockMvc();
		login("a@a.a", "a");
	}
	
	@Test
	public void verifyWacLoaded() {
		ServletContext serContext = wac.getServletContext();
		Assert.assertNotNull(serContext);
		Assert.assertTrue(serContext instanceof MockServletContext);
	}
	
	@Test
	public void updateSelfInfo() {
		try {
			RegisterInputModel input = new RegisterInputModel();
			input.setEmail("alt@alt.alt");
			input.setPassword("alt");
			input.setName("Agamemnonas");
			input.setSurname("Iosif");
			input.setTelNumber("6989669969");
			input.setPicture("");
			assertEquals(200, updateUser(input).getStatus());
		} catch (Exception e) {
			e.printStackTrace();
			fail();
		}
	}
	
	@Test
	public void updateSelfInfoFalseEmail() {
		try {
			RegisterInputModel input = new RegisterInputModel();
			input.setEmail("alt");
			assertEquals(400, updateUser(input).getStatus());
		} catch (Exception e) {
			e.printStackTrace();
			fail();
		}
	}
	
	@Test
	public void updateSelfInfoNullEmail() {
		try {
			RegisterInputModel input = new RegisterInputModel();
			input.setEmail(null);
			assertEquals(200, updateUser(input).getStatus());
		} catch (Exception e) {
			e.printStackTrace();
			fail();
		}
	}
	
	@Test
	public void getDetailedInformationForSelf() {
		try {
			assertEquals(200, getDetailedUserView().getStatus());
			assertEquals(200, getDetailedUserView("").getStatus());
			assertEquals(200, getDetailedUserView(null).getStatus());
		} catch (Exception e) {
			e.printStackTrace();
			fail();
		}
	}
	
	@Test
	public void getDetailedInformationForOthers() {
		try {
			assertEquals(200, getDetailedUserView("k@k.k").getStatus());
			assertEquals(404, getDetailedUserView("falseemail").getStatus());
			assertEquals(404, getDetailedUserView("false@false.false").getStatus());
			assertEquals(404, getDetailedUserView("1111").getStatus());
			assertEquals(404, getDetailedUserView("d@root.com").getStatus());
		} catch (Exception e) {
			e.printStackTrace();
			fail();
		}
	}
	
	private MockHttpServletResponse updateUser(RegisterInputModel input) throws Exception {
		MvcResult result;
		if (session == null)
			result = mockMvc.perform(put("/user/update")
					.contentType(MediaType.APPLICATION_JSON)
					.content(objectMapper.writeValueAsString(input)))
					.andDo(print()).andReturn();
		else
			result = mockMvc.perform(put("/user/update")
					.contentType(MediaType.APPLICATION_JSON)
					.content(objectMapper.writeValueAsString(input))
					.session(session)).andDo(print()).andReturn();
		return result.getResponse();
	}
	
	private MockHttpServletResponse getDetailedUserView() throws Exception {
		MvcResult result;
		if (session == null)
			result = mockMvc.perform(get("/user/details")).andDo(print()).andReturn();
		else
			result = mockMvc.perform(get("/user/details").session(session)).andDo(print()).andReturn();
		return result.getResponse();
	}
	
	private MockHttpServletResponse getDetailedUserView(String email) throws Exception {
		MvcResult result;
		if (session == null)
			result = mockMvc.perform(get("/user/details").param("email", email)).andDo(print()).andReturn();
		else
			result = mockMvc.perform(get("/user/details").param("email", email).session(session)).andDo(print()).andReturn();
		return result.getResponse();
	}

}
